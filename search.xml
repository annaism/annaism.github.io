<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis逆向工程的使用</title>
      <link href="/posts/224d.html"/>
      <url>/posts/224d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#Mybatis逆向工程的使用</p><p>###1.在pom.xml中添加依赖</p><pre><code>```    &lt;!--  添加依赖 --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;      &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;      &lt;version&gt;1.3.5&lt;/version&gt;    &lt;/dependency&gt;```</code></pre><p>###2.创建generatorConfiguration.xml配置文件</p><p>#####2.1配置数据库相关信息<br>#####2.2生成 Entity 类的路径<br>#####2.3XxxMapper.xml 映射文件生成的路径<br>#####2.4Mapper 接口生成的位置<br>#####2.5数据库表名字和我们的entity类对应的映射指定</p><pre><code>```&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt;    &lt;!-- mybatis-generator:generate --&gt;    &lt;context id="atguiguTables" targetRuntime="MyBatis3"&gt;        &lt;commentGenerator&gt;            &lt;!-- 是否去除自动生成的注释 true:是;false:否 --&gt;            &lt;property name="suppressAllComments" value="true"/&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;        &lt;!-- 配置数据库连接 --&gt;        &lt;jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"                        connectionURL="jdbc:mysql://localhost:3306/project_crowd?useSSL=false" userId="root"                        password="0515"&gt;        &lt;/jdbcConnection&gt;        &lt;!-- 默认 false，把 JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true 时把            JDBC DECIMAL和 NUMERIC 类型解析为 java.math.BigDecimal --&gt;        &lt;javaTypeResolver&gt;            &lt;property name="forceBigDecimals" value="false"/&gt;        &lt;/javaTypeResolver&gt;        &lt;!-- targetProject:生成 Entity 类的路径 --&gt;        &lt;javaModelGenerator targetProject=".\src\main\java"                            targetPackage="com.atguigu.crowd.entity"&gt;            &lt;!-- enableSubPackages:是否让 schema 作为包的后缀 --&gt;            &lt;property name="enableSubPackages" value="false"/&gt;            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;            &lt;property name="trimStrings" value="true"/&gt;        &lt;/javaModelGenerator&gt;        &lt;!-- targetProject:XxxMapper.xml 映射文件生成的路径 --&gt;        &lt;sqlMapGenerator targetProject=".\src\main\java"                         targetPackage="com.atguigu.crowd.mapper"&gt;            &lt;!-- enableSubPackages:是否让 schema 作为包的后缀 --&gt;            &lt;property name="enableSubPackages" value="false"/&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- targetPackage：Mapper 接口生成的位置 --&gt;        &lt;javaClientGenerator type="XMLMAPPER"                             targetProject=".\src\main\java"                             targetPackage="com.atguigu.crowd.mapper"&gt;            &lt;!-- enableSubPackages:是否让 schema 作为包的后缀 --&gt;            &lt;property name="enableSubPackages" value="false"/&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 数据库表名字和我们的 entity 类对应的映射指定 --&gt;        &lt;table tableName="t_admin" domainObjectName="Admin"/&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;```</code></pre><p>###3.创建java测试文件<br>    ```<br>    public class MBGtest {</p><pre><code>    @Test    public void test01() throws IOException, XMLParserException, InvalidConfigurationException, SQLException, InterruptedException {        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;//        File configFile = new File("mbg.xml");表示当前项目下        File configFile = new File("generatorConfig.xml");        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    }}```</code></pre><p>###4.运行测试文件</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM项目配置文件（详细版）</title>
      <link href="/posts/836f.html"/>
      <url>/posts/836f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#SSM整合之配置文件(详细版)</p><p>###1.pom文件</p><pre><code>    ```    &lt;dependencies&gt;        &lt;!--Junit--&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.12&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--数据库驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;8.0.26&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- 数据库连接池 --&gt;        &lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.2.6&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Servlet - JSP --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;            &lt;version&gt;2.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;            &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;            &lt;version&gt;2.1.3-b06&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- JSTL标签库 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;            &lt;artifactId&gt;jstl&lt;/artifactId&gt;            &lt;version&gt;1.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--事务--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;            &lt;version&gt;1.8.9&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;cglib&lt;/groupId&gt;            &lt;artifactId&gt;cglib&lt;/artifactId&gt;            &lt;version&gt;3.3.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Mybatis--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.2.8&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;            &lt;version&gt;1.3.1&lt;/version&gt;        &lt;/dependency&gt;         &lt;!-- MyBatis分页插件 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;            &lt;version&gt;5.0.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--Spring--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;            &lt;version&gt;5.3.13&lt;/version&gt;        &lt;/dependency&gt;       &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;            &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;            &lt;！--以下如果不使用其他的日志框架可以省略--&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;                    &lt;groupId&gt;commons-logging&lt;/groupId&gt;                &lt;/exclusion&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;                    &lt;groupId&gt;commons-logging&lt;/groupId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;            &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;        &lt;/dependency&gt;         &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;            &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--配置lombok--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.18&lt;/version&gt;        &lt;/dependency&gt;         &lt;!-- 日志 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;            &lt;version&gt;1.7.22&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;            &lt;version&gt;1.2.3&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- 其他日志框架的中间转换包 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;            &lt;version&gt;1.7.25&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;            &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;            &lt;version&gt;1.7.25&lt;/version&gt;        &lt;/dependency&gt;         &lt;!-- Spring进行JSON数据转换依赖 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;            &lt;version&gt;2.8.8&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;            &lt;version&gt;2.8.8&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--转换成gson--&gt;       &lt;dependency&gt;            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;            &lt;artifactId&gt;gson&lt;/artifactId&gt;            &lt;version&gt;2.8.2&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- SpringSecurity 配置 --&gt;         &lt;dependency&gt;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;            &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;            &lt;version&gt;4.2.10.RELEASE&lt;/version&gt;        &lt;/dependency&gt;         &lt;dependency&gt;        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;            &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;            &lt;version&gt;4.2.10.RELEASE&lt;/version&gt;        &lt;/dependency&gt;         &lt;!-- SpringSecurity 标签库 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;            &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;            &lt;version&gt;4.2.10.RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;!--静态资源导出问题--&gt;    &lt;build&gt;         &lt;resources&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/resources&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.properties&lt;/include&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;true&lt;/filtering&gt;            &lt;/resource&gt;            &lt;resource&gt;                &lt;directory&gt;src/main/java&lt;/directory&gt;                &lt;includes&gt;                    &lt;include&gt;**/*.properties&lt;/include&gt;                    &lt;include&gt;**/*.xml&lt;/include&gt;                &lt;/includes&gt;                &lt;filtering&gt;true&lt;/filtering&gt;            &lt;/resource&gt;        &lt;/resources&gt;    &lt;/build&gt;    ```</code></pre><p>###2.配置Mybatis-config.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8" ?&gt;    &lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;    &lt;configuration&gt;         &lt;settings&gt;            &lt;setting name="lazyLoadingEnabled" value="true"/&gt;            &lt;setting name="aggressiveLazyLoading" value="false"/&gt;            &lt;!-- 下划线转驼峰式 --&gt;            &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;            &lt;setting name="logPrefix" value="sql."/&gt;             &lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;            &lt;setting name="useGeneratedKeys" value="true" /&gt;                &lt;!-- 使用列别名替换列名 默认:true --&gt;            &lt;setting name="useColumnLabel" value="true" /&gt;        &lt;/settings&gt;    &lt;/configuration&gt;    ```</code></pre><p>###3.配置jdbc.properties文件</p><pre><code>    ```    jdbc.url=jdbc:mysql://localhost:3306/project_crowd?useUnicode=true&amp;characterEncoding=UTF-8    jdbc.username=root    jdbc.password=0515    jdbc.driverClass=com.mysql.cj.jdbc.Driver    filters=wall,stat    maxActive=20    initialSize=3    maxWait=5000    minIdle=3    maxIdle=15    timeBetweenEvictionRunsMillis=60000    minEvictableIdleTimeMillis=300000    validationQuery=SELECT 'x'    testWhileIdle=true    testOnBorrow=false    testOnReturn=false    maxOpenPreparedStatements=20    removeAbandoned=true    removeAbandonedTimeout=1800    logAbandoned=true    ```</code></pre><p>###4.配置spring-dao.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns:context="http://www.springframework.org/schema/context"    xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd"&gt;        &lt;!--关联数据库配置文件--&gt;        &lt;!--导入数据库配置文件--&gt;        &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;        &lt;!--    配置数据源--&gt;        &lt;!--    要测试链接--&gt;        &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt;            &lt;property name="username" value="${jdbc.username}"&gt;&lt;/property&gt;            &lt;property name="password" value="${jdbc.password}"&gt;&lt;/property&gt;            &lt;property name="driverClassName" value="${jdbc.driverClass}"&gt;&lt;/property&gt;            &lt;property name="url" value="${jdbc.url}"&gt;&lt;/property&gt;            &lt;property name = "filters" value = "${filters}" /&gt;            &lt;!-- 最大并发连接数 --&gt;            &lt;property name = "maxActive" value = "${maxActive}" /&gt;            &lt;!-- 初始化连接数量 --&gt;            &lt;property name = "initialSize" value = "${initialSize}" /&gt;            &lt;!-- 配置获取连接等待超时的时间 --&gt;            &lt;property name = "maxWait" value = "${maxWait}" /&gt;            &lt;!-- 最小空闲连接数 --&gt;            &lt;property name = "minIdle" value = "${minIdle}" /&gt;            &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;            &lt;property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" /&gt;            &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;            &lt;property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" /&gt;            &lt;!--        &lt;property name = "validationQuery" value = "${validationQuery}" /&gt;     --&gt;            &lt;property name = "testWhileIdle" value = "${testWhileIdle}" /&gt;            &lt;property name = "testOnBorrow" value = "${testOnBorrow}" /&gt;            &lt;property name = "testOnReturn" value = "${testOnReturn}" /&gt;            &lt;property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" /&gt;            &lt;!-- 打开 removeAbandoned 功能 --&gt;            &lt;property name = "removeAbandoned" value = "${removeAbandoned}" /&gt;            &lt;!-- 1800 秒，也就是 30 分钟 --&gt;            &lt;property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" /&gt;            &lt;!-- 关闭 abanded 连接时输出错误日志 --&gt;            &lt;property name = "logAbandoned" value = "${logAbandoned}" /&gt;5        &lt;/bean&gt;         &lt;bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;            &lt;!-- 装配数据源 --&gt;            &lt;property name="dataSource" ref="dataSource"/&gt;            &lt;!-- 指定 MyBatis 全局配置文件位置 --&gt;            &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt;            &lt;!-- 指定 Mapper 配置文件位置 --&gt;            &lt;property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"/&gt;            &lt;!-- 配置 MyBatis 的插件 --&gt;            &lt;property name="plugins"&gt;                &lt;array&gt;                    &lt;!-- 配置 PageHelper --&gt;                    &lt;bean class="com.github.pagehelper.PageInterceptor"&gt;                        &lt;!-- 配置相关属性 --&gt;                        &lt;property name="properties"&gt;                                &lt;props&gt;                                &lt;!-- 配置页码的合理化修正 --&gt;                                    &lt;!-- 让 PageHelper 自动把浏览器传来的 PageNum 修正到 0~总页                                    数范围 --&gt;                                &lt;prop key="reasonable"&gt;true&lt;/prop&gt;                            &lt;/props&gt;                        &lt;/property&gt;                    &lt;/bean&gt;                &lt;/array&gt;            &lt;/property&gt;        &lt;/bean&gt;        &lt;!--配置mapper接口扫描包，动态的实现了Mapper接口可以注入到Spring容器中--&gt;        &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;            &lt;!--注入SqlSessionFactory--&gt;            &lt;property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/&gt;            &lt;!--扫描Mapper接口所在包--&gt;            &lt;property name="basePackage" value="com.wumao.mapper"/&gt;        &lt;/bean&gt;    &lt;/beans&gt;    ```</code></pre><p>###5.配置spring-mvc.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns:mvc="http://www.springframework.org/schema/mvc"    xmlns:context="http://www.springframework.org/schema/context"    xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"&gt;            &lt;!--静态资源过滤--&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;!--    配置扫描包：扫描controller--&gt;    &lt;context:component-scan base-package="com.atguigu.crowd.mvc" /&gt;    &lt;!--    开启SpringMvc注解驱动--&gt;    &lt;mvc:annotation-driven /&gt;    &lt;!--    配置视图解析器--&gt;    &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;        &lt;property name="prefix" value="/WEB-INF/"/&gt;        &lt;property name="suffix" value=".jsp"/&gt;    &lt;/bean&gt;    &lt;!--    基于xml的异常映射--&gt;    &lt;bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"&gt;    &lt;!--        配置异常类型和对应视图之间的关系--&gt;        &lt;property name="exceptionMappings"&gt;    &lt;!--            pros标签的key属性指定异常类型--&gt;    &lt;!--            标签体指定对应的异常视图名称  拼串--&gt;            &lt;props&gt;                &lt;prop key="java.lang.Exception"&gt;system-error&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!--    配置view-controller，直接将访问地址与视图名称相连接，不必写controller方法--&gt;    &lt;mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"&gt;&lt;/mvc:view-controller&gt;    &lt;mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"&gt;&lt;/mvc:view-controller&gt;    &lt;mvc:view-controller path="/admin/to/add/page.html" view-name="admin-add"&gt;&lt;/mvc:view-controller&gt;    &lt;mvc:interceptors&gt;        &lt;!-- mvc:mapping 配置要拦截的资源 --&gt;        &lt;!-- /*对应一层路径，比如：/aaa --&gt;        &lt;!-- /**对应多层路径，比如：/aaa/bbb 或/aaa/bbb/ccc 或/aaa/bbb/ccc/ddd --&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path="/**"/&gt;            &lt;!-- mvc:exclude-mapping 配置不拦截的资源 --&gt;            &lt;mvc:exclude-mapping path="/admin/to/login/page.html"/&gt;            &lt;mvc:exclude-mapping path="/admin/do/login.html"/&gt;            &lt;mvc:exclude-mapping path="/admin/do/logout.html"/&gt;            &lt;bean class="com.atguigu.crowd.mvc.interceptor.LoginInterceptor"/&gt;        &lt;/mvc:interceptor&gt;        &lt;!-- 配置拦截器类 --&gt;    &lt;/mvc:interceptors&gt;    ```</code></pre><p>###6.配置spring-service.xml文件<br>        ```</p><pre><code>    &lt;!--    配置自动扫描包：主要扫描service组件到IOC容器中。(接口和实现类都在service包下)--&gt;    &lt;context:component-scan base-package="com.atguigu.crowd.service"/&gt;    &lt;!--    配置事务管理器--&gt;    &lt;bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;!-- 装配数据源 --&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--    配置aop，事务的切面--&gt;    &lt;!-- 配置 AOP --&gt;    &lt;aop:config&gt;        &lt;!-- 配置切入点表达式 --&gt;        &lt;!-- public String com.atguigu.crowd.service.AdminService.getXxx(Integer id) --&gt;        &lt;aop:pointcut expression="execution(* *..*ServiceImpl.*(..))" id="txPointCut"/&gt;        &lt;!-- 将事务通知和切入点表达式关联到一起 --&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/&gt;    &lt;/aop:config&gt;    &lt;!--    一定要配置，不然事务无效--&gt;    &lt;!-- 配置事务通知 --&gt;    &lt;!-- id 属性用于在 aop:advisor 中引用事务通知 --&gt;    &lt;!-- transaction-manager 属性用于引用事务管理器，如果事务管理器的 bean 的 id 正好是    transactionManager，可以省略这个属性 --&gt;    &lt;tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager"&gt;        &lt;tx:attributes&gt;            &lt;!-- name 属性指定当前要配置的事务方法的方法名 --&gt;            &lt;!-- 查询的方法通常设置为只读，便于数据库根据只读属性进行相关性能优化 --&gt;            &lt;tx:method name="get*" read-only="true"/&gt;            &lt;tx:method name="query*" read-only="true"/&gt;            &lt;tx:method name="find*" read-only="true"/&gt;            &lt;tx:method name="count*" read-only="true"/&gt;            &lt;!-- 增删改方法另外配置 --&gt;            &lt;!-- propagation 属性配置事务方法的传播行为 --&gt;            &lt;!-- 默认值：REQUIRED 表示：当前方法必须运行在事务中，如果没有事务，则开            启事务，在自己的事务中运行。如果已经有了已开启的事务，则在当前事务中运行。有可能            和其他方法共用同一个事务。 --&gt;            &lt;!-- 建议值：REQUIRES_NEW 表示：当前方法必须运行在事务中，如果没有事务，            则开启事务，在自己的事务中运行。和 REQUIRED 的区别是就算现在已经有了已开启的事务，            也一定要开启自己的事务，避免和其他方法共用同一个事务。 --&gt;            &lt;!-- rollback-for 属性配置回滚的异常 --&gt;            &lt;!-- 默认值：运行时异常 --&gt;            &lt;!-- 建议值：编译时异常+运行时异常 --&gt;            &lt;tx:method name="save*" propagation="REQUIRES_NEW"                       rollback-for="java.lang.Exception" /&gt;            &lt;tx:method name="remove*" propagation="REQUIRES_NEW"                       rollback-for="java.lang.Exception" /&gt;            &lt;tx:method name="update*" propagation="REQUIRES_NEW"                       rollback-for="java.lang.Exception" /&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    ```</code></pre><p>###7.配置applicationContext.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;import resource="classpath:spring-dao.xml"/&gt;    &lt;import resource="classpath:spring-service.xml"/&gt;    &lt;import resource="classpath:spring-mvc.xml"/&gt;    &lt;/beans&gt;    ```</code></pre><p>###8.配置web.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;web-app            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"            xmlns="http://java.sun.com/xml/ns/javaee"            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"            id="WebApp_ID" version="2.5"&gt;        &lt;!--1、启动Spring的容器  --&gt;        &lt;context-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;        &lt;/context-param&gt;        &lt;listener&gt;            &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;        &lt;/listener&gt;        &lt;!-- 2、字符编码过滤器，一定要放在所有过滤器之前 --&gt;        &lt;filter&gt;            &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;            &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;        &lt;!--        指定字符集--&gt;            &lt;init-param&gt;                &lt;param-name&gt;encoding&lt;/param-name&gt;                &lt;param-value&gt;utf-8&lt;/param-value&gt;            &lt;/init-param&gt;        &lt;!--        在CharacterEncodingFilter类里面--&gt;        &lt;!--        强制请求字符集--&gt;            &lt;init-param&gt;                &lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;                &lt;param-value&gt;true&lt;/param-value&gt;            &lt;/init-param&gt;        &lt;!--        强制响应字符集--&gt;            &lt;init-param&gt;                &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;                &lt;param-value&gt;true&lt;/param-value&gt;            &lt;/init-param&gt;        &lt;/filter&gt;        &lt;!--    这个filter要在其他filte前面--&gt;        &lt;!--    request.setCharacterEncoding(encoding) 要 求 必 须 在 所 有request.getParameter(xxx)操作前面--&gt;        &lt;!--    response.setCharacterEncoding(encoding)要求必须在所有 response.getWriter()--&gt;        &lt;!--    操作前面--&gt;        &lt;filter-mapping&gt;            &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;        &lt;/filter-mapping&gt;        &lt;servlet&gt;            &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;            &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;            &lt;!-- 以初始化参数的形式指定 SpringMVC 配置文件的位置 --&gt;             &lt;init-param&gt;                 &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;                 &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;             &lt;/init-param&gt;            &lt;!-- 让 DispatcherServlet 在 Web 应用启动时创建对象、初始化 --&gt;            &lt;!-- 默认情况：Servlet 在第一次请求的时候创建对象、初始化 --&gt;             &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;         &lt;/servlet&gt;        &lt;!-- Map all requests to the DispatcherServlet for handling --&gt;        &lt;servlet-mapping&gt;            &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;            &lt;!-- DispatcherServlet 映射的 URL 地址 --&gt;            &lt;!-- 大白话：什么样的访问地址会交给 SpringMVC 来处理 --&gt;            &lt;!-- 配置方式一：符合 RESTFUL 风格使用“/” --&gt;            &lt;!-- &lt;url-pattern&gt;/&lt;/url-pattern&gt; --&gt;            &lt;!-- 配置方式二：请求扩展名 --&gt;        &lt;!--        优点：静态资源不需要特殊配置--&gt;            &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;            &lt;url-pattern&gt;*.json&lt;/url-pattern&gt;        &lt;/servlet-mapping&gt;    &lt;/web-app&gt;    ```</code></pre><p>###补充:配置logback.xml文件</p><pre><code>    ```    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;configuration debug="true"&gt;        &lt;!-- 指定日志输出的位置 --&gt;        &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt;            &lt;encoder&gt;                &lt;!-- 日志输出的格式 --&gt;                &lt;!-- 按照顺序分别是：时间、-5五个字符日志级别、线程名称、打印日志的类、日志主体                内容、换行 --&gt;                &lt;pattern&gt;[%d{HH:mm:ss.SSS}] [%-5level] [%thread] [%logger]                    [%msg]%n&lt;/pattern&gt;            &lt;/encoder&gt;        &lt;/appender&gt;        &lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;        &lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;        &lt;root level="DEBUG"&gt;            &lt;!-- 指定打印日志的 appender，这里通过“STDOUT”引用了前面配置的 appender --&gt;            &lt;appender-ref ref="STDOUT" /&gt;        &lt;/root&gt;        &lt;!-- 根据特殊需求指定局部日志级别 --&gt;        &lt;logger name="com.atguigu.crowd.mapper" level="DEBUG"/&gt;    &lt;/configuration&gt;    ```</code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关机、重启和用户登录注销</title>
      <link href="/posts/25dc.html"/>
      <url>/posts/25dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关机、重启和用户登录注销"><a href="#关机、重启和用户登录注销" class="headerlink" title="关机、重启和用户登录注销"></a>关机、重启和用户登录注销</h1><h2 id="1-关机-amp-重启命令"><a href="#1-关机-amp-重启命令" class="headerlink" title="1. 关机&amp;重启命令"></a>1. 关机&amp;重启命令</h2><h3 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 shutdown</h3><ul><li>shutdown -h now：表示立即关机</li><li>shutdown -h 1：表示1分钟后关机</li><li>shutdown -r now：立即重启</li></ul><h3 id="1-2-halt"><a href="#1-2-halt" class="headerlink" title="1.2 halt"></a>1.2 halt</h3><ul><li>halt：直接使用，关机</li></ul><h3 id="1-3-reboot"><a href="#1-3-reboot" class="headerlink" title="1.3 reboot"></a>1.3 reboot</h3><ul><li>reboot 重启系统</li></ul><h3 id="1-4-sync"><a href="#1-4-sync" class="headerlink" title="1.4 sync"></a>1.4 sync</h3><ul><li>sync：把内存的数据同步到磁盘上</li></ul><blockquote><p>当我们关机或者重启时，都应该先执行一下sync，防止数据丢失。</p></blockquote><h2 id="2-用户登录注销"><a href="#2-用户登录注销" class="headerlink" title="2. 用户登录注销"></a>2. 用户登录注销</h2><ul><li>登录时少用root账号登录，以避免操作失误的损失</li><li>平时可登录普通账户，再用“su - 用户名”切换成管理员登录</li></ul><h3 id="2-1-logout"><a href="#2-1-logout" class="headerlink" title="2.1 logout"></a>2.1 logout</h3><ul><li>logout：注销用户</li></ul><blockquote><p>在图形运行级别无效，在运行级别3有效。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi和vim编辑器</title>
      <link href="/posts/b400.html"/>
      <url>/posts/b400.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h1><h2 id="1-vi和vim的基本介绍"><a href="#1-vi和vim的基本介绍" class="headerlink" title="1. vi和vim的基本介绍"></a>1. vi和vim的基本介绍</h2><ul><li>所有Linux系统都会内置vi文本编辑器</li><li>vim是vi的升级版，可以主动以字体颜色分辨语法的正确性，代码补完和编译，错误跳转等功能。</li></ul><h2 id="2-vi和vim的三种模式"><a href="#2-vi和vim的三种模式" class="headerlink" title="2. vi和vim的三种模式"></a>2. vi和vim的三种模式</h2><h3 id="2-1-正常模式"><a href="#2-1-正常模式" class="headerlink" title="2.1 正常模式"></a>2.1 正常模式</h3><ul><li>在正常模式下，我们可以使用快捷键。</li><li>用vim打开一个文件就直接进入一般模式<code>（vim filename）</code></li><li>可以使用【删除字符】或【删除整行】来处理文档内容，也可以使用【复制黏贴按钮】</li></ul><h3 id="2-2-插入-编辑模式"><a href="#2-2-插入-编辑模式" class="headerlink" title="2.2 插入/编辑模式"></a>2.2 插入/编辑模式</h3><ul><li>在这个模式下，可以编辑文件内容。</li><li>按下i,I,o,O,a,A,r,R等字母就可进入编辑模式。<code>一般用i就好</code></li><li>退出编辑模式 <code>esc</code></li></ul><h3 id="2-3-命令行模式"><a href="#2-3-命令行模式" class="headerlink" title="2.3 命令行模式"></a>2.3 命令行模式</h3><ul><li>在这个模式中，可以利用指令完成读取，存盘，替换，离开，显示行号的等动作。</li><li>：wq保存退出</li><li>：q无修改直接退出</li><li>:q!不保存修改直接退出</li></ul><h2 id="3-Vim-的常见指令案例"><a href="#3-Vim-的常见指令案例" class="headerlink" title="3. Vim 的常见指令案例"></a>3. Vim 的常见指令案例</h2><p>（大部分在正常模式下使用）</p><ol><li>yy：拷贝当前行 <code>（p）粘贴</code></li><li>5yy：拷贝当前5行</li><li>dd：删除当前行</li><li>5dd：删除当前行向下的5行</li><li>在文件中查找某个单词：命令行输入 /（查找内容后回车），按n查找下一个</li><li>设置文件行号：set nu，取消文件行号：set nonu</li><li>编辑文件，正常模式下使用快捷键到达文档最末行：G，最首行：gg</li><li>撤销输入：在正常模式下输入u</li><li>编辑文件，光标移动到某行：shift+g<ul><li>显示行号：set nu</li><li>输入行号这个数</li><li>输入shift+g</li></ul></li></ol><h2 id="4-vim其他常见指令补充"><a href="#4-vim其他常见指令补充" class="headerlink" title="4. vim其他常见指令补充"></a>4. vim其他常见指令补充</h2><h3 id="4-1-文件命令"><a href="#4-1-文件命令" class="headerlink" title="4.1 文件命令"></a>4.1 文件命令</h3><p>指令|说明</p><p>vim [file1 file2 file3 …]|打开单个或多个文件</p><p>:open file|在vim窗口中打开一个新文件</p><p>:split file|在新窗口中打开文件（split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。）</p><p>Ctrl+ww| 移动到下一个窗口</p><p>Ctrl+wj |移动到下方的窗口</p><p>Ctrl+wk |移动到上方的窗口</p><p>:close |最后一个窗口不能使用此命令，可以防止意外退出vim。</p><p>:only|关闭所有窗口，只保留当前窗口</p><p>:bn|切换到下一个文件</p><p>:bp|切换到上一个文件</p><p>:args|查看当前打开的文件列表，当前正在编辑的文件会用[]括起来</p><p>:e <a href="ftp://192.168.10.76/abc.txt" target="_blank" rel="noopener">ftp://192.168.10.76/abc.txt</a>| 打开远程文件，比如ftp或者share folder</p><h3 id="4-2-普通模式"><a href="#4-2-普通模式" class="headerlink" title="4.2 普通模式"></a>4.2 普通模式</h3><h4 id="4-2-1-插入命令"><a href="#4-2-1-插入命令" class="headerlink" title="4.2.1 插入命令"></a>4.2.1 插入命令</h4><p>指令|说明</p><p>i |在当前位置生前插入</p><p>I |在当前行首插入</p><p>a |在当前位置后插入</p><p>A |在当前行尾插入</p><p>o |在当前行之后插入一行</p><p>O |在当前行之前插入一行</p><h4 id="4-2-2-游标移动"><a href="#4-2-2-游标移动" class="headerlink" title="4.2.2 游标移动"></a>4.2.2 游标移动</h4><p>指令|说明</p><p>gg |移动到文件头。 = [[<br>G（shift + g）| 移动到文件尾。 = ]]</p><p>行數 → G|移動到第 n 行</p><p>冒号+行号，回车| 比如跳到240行就是 :240回车</p><p>h | 左移一个字符</p><p>l|右移一个字符，这个命令很少用，一般用w代替。</p><p>k |上移一个字符</p><p>j |下移一个字符</p><p>w |向前移动一个单词（光标停在单词首部）</p><p>b | 向后移动一个单词 2b 向后移动2个单词</p><p>e |同w，只不过是光标停在单词尾部</p><p>ge |同b，光标停在单词尾部。</p><p>^|移动到本行第一个非空白字符上。</p><p>0|移动到本行第一个字符上</p><p>HOME |移动到本行第一个字符。同0健。</p><p>$ |移动到行尾 3$ 移动到下面3行的行尾</p><p>f（find）| fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。</p><p>F |同f，反向查找</p><h4 id="4-2-3-撤销和重做"><a href="#4-2-3-撤销和重做" class="headerlink" title="4.2.3 撤销和重做"></a>4.2.3 撤销和重做</h4><p>指令|说明</p><p>u |撤销（Undo）</p><p>U |撤销对整行的操作</p><p>Ctrl + r |重做（Redo），即撤销的撤销。</p><h4 id="4-2-4-删除命令"><a href="#4-2-4-删除命令" class="headerlink" title="4.2.4 删除命令"></a>4.2.4 删除命令</h4><p>指令|说明</p><p>x |删除当前字符</p><p>3x |删除当前光标开始向后三个字符</p><p>X |删除当前字符的前一个字符。X=dh</p><p>dl |删除当前字符， dl=x</p><p>dh |删除前一个字符</p><p>dd |删除当前行</p><p>dj |删除上一行</p><p>dk |删除下一行</p><p>10d |删除当前行开始的10行。</p><p>D |删除当前字符至行尾。D=d$</p><p>d$ |删除当前字符之后的所有字符（本行）</p><p>kdgg |删除当前行之前所有行（不包括当前行）</p><p>jdG（jd shift + g） |删除当前行之后所有行（不包括当前行）</p><p>:1,10d |删除1-10行</p><p>:11,$d |删除11行及以后所有的行</p><p>:1,$d |删除所有行</p><p>J(shift + j)|删除两行之间的空行，实际上是合并两行。</p><h4 id="4-2-5-拷贝，剪贴和粘贴"><a href="#4-2-5-拷贝，剪贴和粘贴" class="headerlink" title="4.2.5 拷贝，剪贴和粘贴"></a>4.2.5 拷贝，剪贴和粘贴</h4><p>指令|说明</p><p>yy |拷贝当前行</p><p>nyy |拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</p><p>p |在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</p><p>shift+p |在当前行前粘贴</p><p>:1,10 co 20 |将1-10行插入到第20行之后。</p><p>:1,$ co $ |将整个文件复制一份并添加到文件尾部。</p><p>ddp |交换当前行和其下一行</p><p>xp| 交换当前字符和其后一个字符</p><p>ndd|剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</p><p>:1,10d|将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</p><p>:1, 10 m 20 |将第1-10行移动到第20行之后。</p><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</p><h4 id="4-2-6-退出命令"><a href="#4-2-6-退出命令" class="headerlink" title="4.2.6 退出命令"></a>4.2.6 退出命令</h4><p>指令|说明</p><p>:wq |保存并退出</p><p>ZZ |保存并退出</p><p>:q! |强制退出并忽略所有更改</p><p>:e! |放弃所有修改，并打开原来文件。</p><p>:q | 未修改直接退出</p><h4 id="4-2-7-注释命令"><a href="#4-2-7-注释命令" class="headerlink" title="4.2.7 注释命令"></a>4.2.7 注释命令</h4><p>perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</p><p>指令|说明</p><p>3,5 s/^/#/g |注释第3-5行</p><p>3,5 s/^#//g |解除3-5行的注释</p><p>1,$ s/^/#/g |注释整个文档。</p><p>:%s/^/#/g |注释整个文档，此法更快。</p><h3 id="4-3-执行shell命令"><a href="#4-3-执行shell命令" class="headerlink" title="4.3 执行shell命令"></a>4.3 执行shell命令</h3><ul><li>:!command</li></ul><p>指令|说明</p><p>:!ls |列出当前目录下文件</p><p>:!perl -c script.pl |检查perl脚本语法，可以不用退出vim，非常方便。</p><p>:!perl script.pl |执行perl脚本，可以不用退出vim，非常方便。</p><p>:suspend或Ctrl - Z |挂起vim，回到shell，按fg可以返回vim。</p><h3 id="4-4-帮助命令"><a href="#4-4-帮助命令" class="headerlink" title="4.4 帮助命令"></a>4.4 帮助命令</h3><p>指令|说明</p><p>:help or F1 |显示整个帮助</p><p>:help xxx |显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。</p><p>:help ‘number’ |Vim选项的帮助用单引号括起</p><p>:help &lt;Esc&gt; |特殊键的帮助用&lt;&gt;扩起</p><p>:help -t |Vim启动参数的帮助用-</p><p>：help i_&lt;Esc&gt;| 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式</p><p>帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回</p><h3 id="4-5-其他非编辑命令"><a href="#4-5-其他非编辑命令" class="headerlink" title="4.5 其他非编辑命令"></a>4.5 其他非编辑命令</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>重复前一次命令</td></tr></tbody></table><p>:set ruler?　|查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看</p><p>:scriptnames　|查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。</p><p>:set list |显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了 expandtab，那么tab将被扩展为空格。</p><ul><li>Vim教程<ul><li>在Unix系统上 $ vimtutor</li><li>在Windows系统上 :help tutor</li></ul></li><li>录制宏:<ul><li>按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</li></ul></li><li>:syntax 列出已经定义的语法项</li><li>:syntax clear 清除已定义的语法规则</li><li>:syntax case match 大小写敏感，int和Int将视为不同的语法元素</li><li>:syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux目录结构</title>
      <link href="/posts/2046.html"/>
      <url>/posts/2046.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Linux基本目录结构"><a href="#Linux基本目录结构" class="headerlink" title="Linux基本目录结构"></a>Linux基本目录结构</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><ul><li>Linux的文件系统采用级层式子的树状目录结构，</li><li>最上层是根目录“/”</li><li><strong>Linux世界里，一切皆文件。</strong></li></ul><h2 id="2-目录用途"><a href="#2-目录用途" class="headerlink" title="2. 目录用途"></a>2. 目录用途</h2><ul><li><code>/bin：</code> 是Binary的缩写，这个目录存放着<code>最经常使用的命令</code>。</li><li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li><code>/home：</code>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><code>/root：</code>该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>/lib：系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li><li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>/etc：所有的系统管理所需要的配置文件和子目录my.conf。</li><li><code>/usr/local</code>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li><li><code>/boot：</code>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</li><li>/srv：service的缩写，该目录存放一些服务启动之后需要提供的数据。</li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li>/tmp：这个目录是用来存放一些临时文件的。</li><li>/dev：类似windows的设备管理器，把所有的硬件用文件的形式存储。</li><li><code>/media：</code>linux系统会自动识别一些设备，例如U盘光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><code>/mnt：</code>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了。</li><li><code>/opt：</code>这是给主机额外安装软件所摆放的目录，如安装ORACLE数据库就可放到该目录下。默认为空。</li><li>/usr/local：这是另一个给主机额外安装软件所安装的目录，一般是通过编译源码的方式安装的程序。</li><li><code>/var：</code>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件。</li><li>/selinux：SELinux是一种安全子系统，它能控制程序只能访问特定文件。</li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ol><li>Linux的目录中有且只有一个根目录。</li><li>Linux的各个目录存放的内容是规划好，不用乱放文件。</li><li>Linux是以文件的形式管理我们的设备，因此linux系统，一切皆为文件。</li><li>Linux的各个文件目录下存放什么内容，必须有一个认识。</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joker</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Joker-amp-amp-Anna"><a href="#Joker-amp-amp-Anna" class="headerlink" title="Joker &amp;&amp; Anna"></a>Joker &amp;&amp; Anna</h1><p><span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="–Hello-World"><a href="#–Hello-World" class="headerlink" title="–Hello World"></a>–Hello World</h2>]]></content>
      
      
      <categories>
          
          <category> Joker. </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Joker. </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
